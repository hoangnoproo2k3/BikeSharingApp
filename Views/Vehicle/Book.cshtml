@model BikeSharingApp.Models.BookingViewModel

@{
    ViewData["Title"] = "Book Now";
}

<style>
    .booking-form {
        background-color: #ffffff;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 20px;
        margin-top: 20px;
    }

    .booking-form h1 {
        font-size: 2rem;
        color: #007bff;
    }

    .booking-form .detail-bike {
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: row-reverse;
        gap: 40px;
    }

    .booking-form .image-container {
        overflow: hidden;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .booking-form .image-container img {
        width: 100%;
        height: 120px;
        object-fit: cover;
    }

    .booking-form .form-group {
        margin-bottom: 15px;
    }

    .booking-form .form-group label {
        font-weight: bold;
        margin-bottom: 5px;
    }

    .booking-form .form-control {
        border-radius: 4px;
        box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);
    }

    .booking-form .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
        padding: 10px 20px;
        font-size: 16px;
        border-radius: 4px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .booking-form .btn-primary:hover {
        background-color: #0056b3;
        border-color: #004085;
    }

    .booking-form .total-price {
        font-size: 1.5rem;
        font-weight: bold;
        color: #28a745;
    }

    .booking-form p {
        font-size: 1.1rem;
        margin: 5px 0;
    }
</style>

<div class="container my-5">
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">
            @TempData["ErrorMessage"]
        </div>
    }

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success">
            @TempData["SuccessMessage"]
        </div>
    }
    <div class="booking-form">
        <div class="detail-bike">
            <div class="image-container mb-4">
                <img src="@Model.Bike.Img" alt="@Model.Bike.BikeName" class="img-fluid rounded shadow-sm">
            </div>
            <h1 class="mb-4 text-primary">@Model.Bike.BikeName</h1>
        </div>

        <form asp-action="Book" method="post">
            <div class="form-group">
                <label asp-for="StartDate" class="control-label">Ngày Bắt Đầu</label>
                <input asp-for="StartDate" class="form-control" type="datetime-local" id="startDate"
                    min="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" />
                <span asp-validation-for="StartDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="EndDate" class="control-label">Ngày Kết Thúc</label>
                <input asp-for="EndDate" class="form-control" type="datetime-local" id="endDate"
                    min="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" />
                <span asp-validation-for="EndDate" class="text-danger"></span>
            </div>
            <p>Giá Theo Giờ: <span id="pricePerHour" class="font-weight-bold">@Model.Bike.PricePerHour</span></p>
            <p>Giá Theo Ngày: <span id="pricePerDay" class="font-weight-bold">@Model.Bike.Price</span></p>
            <div class="mb-3">
                <h5 class="text-muted">Tổng Tiền Thanh Toán</h5>
                <p class="total-price" id="totalPrice">0.00</p>
            </div>
            <input type="hidden" asp-for="@Model.Bike.Id" value="@Model.Bike.Id" />
            <button type="submit" class="btn btn-primary">Đặt Ngay</button>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const startDateInput = document.getElementById('startDate');
            const endDateInput = document.getElementById('endDate');
            const totalPriceElem = document.getElementById('totalPrice');
            const pricePerHourElem = document.getElementById('pricePerHour');
            const pricePerDayElem = document.getElementById('pricePerDay');

            const pricePerHour = parseFloat(pricePerHourElem.textContent);
            const pricePerDay = parseFloat(pricePerDayElem.textContent);

            function calculatePrice() {
                const startDate = new Date(startDateInput.value);
                const endDate = new Date(endDateInput.value);

                if (!startDate || !endDate || startDate >= endDate) {
                    totalPriceElem.textContent = '0.00';
                    return;
                }

                const timeDifference = endDate - startDate;
                const hoursDifference = timeDifference / (1000 * 60 * 60); // Hours
                const daysDifference = Math.ceil(hoursDifference / 24); // Days

                let totalPrice;
                if (hoursDifference < 24) {
                    // Less than a day
                    totalPrice = hoursDifference * pricePerHour;
                } else {
                    // One day or more
                    totalPrice = daysDifference * pricePerDay;
                }

                totalPriceElem.textContent = `${totalPrice.toFixed(2)}`;
            }

            startDateInput.addEventListener('change', calculatePrice);
            endDateInput.addEventListener('change', calculatePrice);

            // Validate end date must be greater than or equal to start date
            endDateInput.addEventListener('change', function () {
                const startDate = new Date(startDateInput.value);
                const endDate = new Date(endDateInput.value);

                if (startDate && endDate && endDate < startDate) {
                    endDateInput.setCustomValidity('End date must be greater than or equal to start date.');
                } else {
                    endDateInput.setCustomValidity('');
                }
            });

            // Validate start date must be greater than or equal to current date
            startDateInput.addEventListener('change', function () {
                const startDate = new Date(startDateInput.value);
                const currentDate = new Date();

                if (startDate < currentDate) {
                    startDateInput.setCustomValidity('Start date must be greater than or equal to current date.');
                } else {
                    startDateInput.setCustomValidity('');
                }
            });
        });
    </script>
}
