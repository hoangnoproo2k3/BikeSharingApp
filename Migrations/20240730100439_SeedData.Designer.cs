// <auto-generated />
using System;
using BikeSharingApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BikeSharingApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240730100439_SeedData")]
    partial class SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BikeSharingApp.Models.Bike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BikeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Bikes");
                });

            modelBuilder.Entity("BikeSharingApp.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BikeId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BikeId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StatusId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("BikeSharingApp.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Coordinates")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Tôn Thất Tùng, Đống Đa, Hà Nội",
                            Coordinates = "21.0081,105.5204",
                            Name = "Công viên Thống Nhất"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Hồ Hoàn Kiếm, Hoàn Kiếm, Hà Nội",
                            Coordinates = "21.0285,105.8542",
                            Name = "Công viên Hoàn Kiếm"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Cầu Giấy, Hà Nội",
                            Coordinates = "21.0291,105.7795",
                            Name = "Công viên Cầu Giấy"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Yên Sở, Hoàng Mai, Hà Nội",
                            Coordinates = "20.9915,105.8235",
                            Name = "Công viên Yên Sở"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Linh Đàm, Hoàng Mai, Hà Nội",
                            Coordinates = "20.9955,105.8177",
                            Name = "Công viên Bắc Linh Đàm"
                        });
                });

            modelBuilder.Entity("BikeSharingApp.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Administrator",
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Regular user",
                            RoleName = "User"
                        });
                });

            modelBuilder.Entity("BikeSharingApp.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Approved"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Rejected"
                        });
                });

            modelBuilder.Entity("BikeSharingApp.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BikeSharingApp.Models.Bike", b =>
                {
                    b.HasOne("BikeSharingApp.Models.Location", "Location")
                        .WithMany("Bikes")
                        .HasForeignKey("LocationId");

                    b.HasOne("BikeSharingApp.Models.User", "Owner")
                        .WithMany("OwnedBikes")
                        .HasForeignKey("OwnerId");

                    b.Navigation("Location");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("BikeSharingApp.Models.Booking", b =>
                {
                    b.HasOne("BikeSharingApp.Models.Bike", "Bike")
                        .WithMany("Bookings")
                        .HasForeignKey("BikeId");

                    b.HasOne("BikeSharingApp.Models.User", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId");

                    b.HasOne("BikeSharingApp.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bike");

                    b.Navigation("Customer");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("BikeSharingApp.Models.User", b =>
                {
                    b.HasOne("BikeSharingApp.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BikeSharingApp.Models.Bike", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("BikeSharingApp.Models.Location", b =>
                {
                    b.Navigation("Bikes");
                });

            modelBuilder.Entity("BikeSharingApp.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BikeSharingApp.Models.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("OwnedBikes");
                });
#pragma warning restore 612, 618
        }
    }
}
